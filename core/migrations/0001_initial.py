# Generated by Django 5.2.3 on 2025-06-22 08:13

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the course.",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="A detailed description of the course content."
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="beginner",
                        help_text="The difficulty level of the course.",
                        max_length=20,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="The price of the course.",
                        max_digits=10,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the course was created.",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp of the last update to the course details.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the course is currently active and available for enrollment.",
                    ),
                ),
                (
                    "instructors",
                    models.ManyToManyField(
                        help_text="Instructors who teach this course.",
                        limit_choices_to={"groups__name": "instructor"},
                        related_name="taught_courses",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Course",
                "verbose_name_plural": "Courses",
                "ordering": ["title"],
            },
        ),
        migrations.CreateModel(
            name="Assessment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the assessment.", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A description of the assessment requirements.",
                        null=True,
                    ),
                ),
                (
                    "assessment_type",
                    models.CharField(
                        choices=[
                            ("quiz", "Quiz"),
                            ("assignment", "Assignment"),
                            ("exam", "Exam"),
                            ("project", "Project"),
                        ],
                        default="quiz",
                        help_text="The type of assessment.",
                        max_length=20,
                    ),
                ),
                (
                    "due_date",
                    models.DateTimeField(
                        help_text="The deadline for completing this assessment."
                    ),
                ),
                (
                    "max_score",
                    models.PositiveIntegerField(
                        help_text="The maximum possible score for this assessment."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        help_text="The course this assessment belongs to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessments",
                        to="core.course",
                    ),
                ),
            ],
            options={
                "verbose_name": "Assessment",
                "verbose_name_plural": "Assessments",
                "ordering": ["-due_date", "course__title", "title"],
            },
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        auto_now_add=True, help_text="The date and time of enrollment."
                    ),
                ),
                (
                    "completion_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="The date and time when the student completed the course.",
                        null=True,
                    ),
                ),
                (
                    "is_completed",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the student has completed the course.",
                    ),
                ),
                (
                    "progress",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="The student's progress in the course as a percentage (0.00 to 100.00).",
                        max_digits=5,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="The course the student is enrolled in.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="core.course",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student enrolled in the course.",
                        limit_choices_to={"groups__name": "student"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Enrollment",
                "verbose_name_plural": "Enrollments",
                "ordering": ["-enrollment_date"],
                "unique_together": {("student", "course")},
            },
        ),
        migrations.CreateModel(
            name="CoursePayment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The amount paid for the course.",
                        max_digits=10,
                    ),
                ),
                (
                    "payment_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time the payment was made.",
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        blank=True,
                        help_text="Unique transaction ID from the payment gateway.",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        blank=True,
                        help_text="Method of payment (e.g., 'Stripe', 'PayPal', 'Card').",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        help_text="Status of the payment.",
                        max_length=20,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="The course for which the payment was made.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="core.course",
                    ),
                ),
                (
                    "payer",
                    models.ForeignKey(
                        help_text="The user who made the payment (can be student or sponsor).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="payments_made",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "enrollment",
                    models.OneToOneField(
                        blank=True,
                        help_text="The enrollment associated with this payment.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payment",
                        to="core.enrollment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course Payment",
                "verbose_name_plural": "Course Payments",
                "ordering": ["-payment_date"],
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the module.", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="A description of the module's content.",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        help_text="The order of the module within the course."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "course",
                    models.ForeignKey(
                        help_text="The course to which this module belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="modules",
                        to="core.course",
                    ),
                ),
            ],
            options={
                "verbose_name": "Module",
                "verbose_name_plural": "Modules",
                "ordering": ["course", "order"],
                "unique_together": {("course", "order")},
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("course_deadline", "Course Deadline"),
                            ("assessment_result", "Assessment Result"),
                            ("new_assignment", "New Assignment"),
                            ("progress_report", "Progress Report"),
                            ("engagement_alert", "Engagement Alert"),
                            ("general", "General Announcement"),
                        ],
                        help_text="The type of notification (e.g., deadline, result, new assignment).",
                        max_length=50,
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="The content of the notification message."
                    ),
                ),
                (
                    "link",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL for the user to click to view more details.",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the notification was created.",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the recipient has read the notification.",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        help_text="The user who will receive this notification.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user who triggered this notification (e.g., instructor, admin).",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SponsorProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the organization the sponsor represents.",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "contact_person",
                    models.CharField(
                        blank=True,
                        help_text="Name of the primary contact person at the organization.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email for the sponsor's contact person.",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "total_funds_provided",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="Total funds provided by this sponsor.",
                        max_digits=12,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        help_text="The associated user with 'sponsor' role.",
                        limit_choices_to={"groups__name": "sponsor"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsor_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Sponsor Profile",
                "verbose_name_plural": "Sponsor Profiles",
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The title of the lesson.", max_length=200
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="The main content of the lesson (e.g., text, HTML, markdown)."
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL for a video associated with the lesson.",
                        null=True,
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        help_text="The order of the lesson within the module."
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "module",
                    models.ForeignKey(
                        help_text="The module to which this lesson belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="core.module",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson",
                "verbose_name_plural": "Lessons",
                "ordering": ["module", "order"],
                "unique_together": {("module", "order")},
            },
        ),
        migrations.CreateModel(
            name="Sponsorship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount_funded",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="The amount of money provided by the sponsor for this sponsorship.",
                        max_digits=10,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        help_text="The date when the sponsorship began.",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="The date when the sponsorship is expected to end.",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the sponsorship is currently active.",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any additional notes about the sponsorship.",
                        null=True,
                    ),
                ),
                (
                    "sponsor",
                    models.ForeignKey(
                        help_text="The sponsor providing the funding.",
                        limit_choices_to={"groups__name": "sponsor"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sponsored_students",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student receiving the sponsorship.",
                        limit_choices_to={"groups__name": "student"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_sponsorships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Sponsorship",
                "verbose_name_plural": "Sponsorships",
                "ordering": ["-start_date"],
                "unique_together": {("sponsor", "student", "start_date")},
            },
        ),
        migrations.CreateModel(
            name="Submission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "submission_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="The date and time of the submission.",
                    ),
                ),
                (
                    "submission_content",
                    models.TextField(
                        blank=True,
                        help_text="The content of the submission (e.g., text, answers, link to file).",
                        null=True,
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The score received for this submission.",
                        max_digits=5,
                        null=True,
                    ),
                ),
                (
                    "feedback",
                    models.TextField(
                        blank=True,
                        help_text="Feedback provided by the instructor on the submission.",
                        null=True,
                    ),
                ),
                (
                    "is_graded",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the submission has been graded.",
                    ),
                ),
                (
                    "assessment",
                    models.ForeignKey(
                        help_text="The assessment to which this submission belongs.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="core.assessment",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="The student who submitted this assessment.",
                        limit_choices_to={"groups__name": "student"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Submission",
                "verbose_name_plural": "Submissions",
                "ordering": ["-submission_date"],
                "unique_together": {("assessment", "student")},
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("instructor", "Instructor"),
                            ("student", "Student"),
                            ("sponsor", "Sponsor"),
                        ],
                        default="student",
                        help_text="Defines the user's role within the LMS.",
                        max_length=20,
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="A short biography or description for the user.",
                        null=True,
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True, help_text="The user's date of birth.", null=True
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="The user's contact phone number.",
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "unique_together": {("user",)},
            },
        ),
    ]
